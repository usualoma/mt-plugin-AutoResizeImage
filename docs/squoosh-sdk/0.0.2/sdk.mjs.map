{"version":3,"file":"sdk.mjs","sources":["../node_modules/comlink/comlink.js","../src/sdk.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol that gets added to objects by `Comlink.proxy()`.\n */\nexport const proxyValueSymbol = Symbol(\"comlinkProxyValue\");\n/**\n * Returns true if the given value has the proxy value symbol added to it.\n */\nconst isProxyValue = (value) => !!value && value[proxyValueSymbol] === true;\nconst TRANSFERABLE_TYPES = [\"ArrayBuffer\", \"MessagePort\", \"OffscreenCanvas\"]\n    .filter(f => f in self)\n    .map(f => self[f]);\nconst uid = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\nconst throwSymbol = Symbol(\"throw\");\nconst proxyTransferHandler = {\n    canHandle: isProxyValue,\n    serialize: (obj) => {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return port2;\n    },\n    deserialize: (obj) => {\n        return proxy(obj);\n    }\n};\nconst throwTransferHandler = {\n    canHandle: (obj) => obj && obj[throwSymbol],\n    serialize: (obj) => {\n        const message = obj && obj.message;\n        const stack = obj && obj.stack;\n        return Object.assign({}, obj, { message, stack });\n    },\n    deserialize: (obj) => {\n        throw Object.assign(Error(), obj);\n    }\n};\nexport const transferHandlers = new Map([\n    [\"PROXY\", proxyTransferHandler],\n    [\"THROW\", throwTransferHandler]\n]);\nlet pingPongMessageCounter = 0;\nexport function proxy(endpoint, target) {\n    if (isWindow(endpoint))\n        endpoint = windowEndpoint(endpoint);\n    if (!isEndpoint(endpoint))\n        throw Error(\"endpoint does not have all of addEventListener, removeEventListener and postMessage defined\");\n    activateEndpoint(endpoint);\n    return cbProxy(async (irequest) => {\n        let args = [];\n        if (irequest.type === \"APPLY\" || irequest.type === \"CONSTRUCT\")\n            args = irequest.argumentsList.map(wrapValue);\n        const response = await pingPongMessage(endpoint, Object.assign({}, irequest, { argumentsList: args }), transferableProperties(args));\n        const result = response.data;\n        return unwrapValue(result.value);\n    }, [], target);\n}\nexport function proxyValue(obj) {\n    const proxyVal = obj;\n    proxyVal[proxyValueSymbol] = true;\n    return proxyVal;\n}\nexport function expose(rootObj, endpoint) {\n    if (isWindow(endpoint))\n        endpoint = windowEndpoint(endpoint);\n    if (!isEndpoint(endpoint))\n        throw Error(\"endpoint does not have all of addEventListener, removeEventListener and postMessage defined\");\n    activateEndpoint(endpoint);\n    attachMessageHandler(endpoint, async function (event) {\n        if (!event.data.id || !event.data.callPath)\n            return;\n        const irequest = event.data;\n        let that = await irequest.callPath\n            .slice(0, -1)\n            .reduce((obj, propName) => obj[propName], rootObj);\n        let obj = await irequest.callPath.reduce((obj, propName) => obj[propName], rootObj);\n        let iresult = obj;\n        let args = [];\n        if (irequest.type === \"APPLY\" || irequest.type === \"CONSTRUCT\")\n            args = irequest.argumentsList.map(unwrapValue);\n        if (irequest.type === \"APPLY\") {\n            try {\n                iresult = await obj.apply(that, args);\n            }\n            catch (e) {\n                iresult = e;\n                iresult[throwSymbol] = true;\n            }\n        }\n        if (irequest.type === \"CONSTRUCT\") {\n            try {\n                iresult = new obj(...args); // eslint-disable-line new-cap\n                iresult = proxyValue(iresult);\n            }\n            catch (e) {\n                iresult = e;\n                iresult[throwSymbol] = true;\n            }\n        }\n        if (irequest.type === \"SET\") {\n            obj[irequest.property] = irequest.value;\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            iresult = true;\n        }\n        iresult = makeInvocationResult(iresult);\n        iresult.id = irequest.id;\n        return endpoint.postMessage(iresult, transferableProperties([iresult]));\n    });\n}\nfunction wrapValue(arg) {\n    // Is arg itself handled by a TransferHandler?\n    for (const [key, transferHandler] of transferHandlers) {\n        if (transferHandler.canHandle(arg)) {\n            return {\n                type: key,\n                value: transferHandler.serialize(arg)\n            };\n        }\n    }\n    // If not, traverse the entire object and find handled values.\n    let wrappedChildren = [];\n    for (const item of iterateAllProperties(arg)) {\n        for (const [key, transferHandler] of transferHandlers) {\n            if (transferHandler.canHandle(item.value)) {\n                wrappedChildren.push({\n                    path: item.path,\n                    wrappedValue: {\n                        type: key,\n                        value: transferHandler.serialize(item.value)\n                    }\n                });\n            }\n        }\n    }\n    for (const wrappedChild of wrappedChildren) {\n        const container = wrappedChild.path\n            .slice(0, -1)\n            .reduce((obj, key) => obj[key], arg);\n        container[wrappedChild.path[wrappedChild.path.length - 1]] = null;\n    }\n    return {\n        type: \"RAW\",\n        value: arg,\n        wrappedChildren\n    };\n}\nfunction unwrapValue(arg) {\n    if (transferHandlers.has(arg.type)) {\n        const transferHandler = transferHandlers.get(arg.type);\n        return transferHandler.deserialize(arg.value);\n    }\n    else if (isRawWrappedValue(arg)) {\n        for (const wrappedChildValue of arg.wrappedChildren || []) {\n            if (!transferHandlers.has(wrappedChildValue.wrappedValue.type))\n                throw Error(`Unknown value type \"${arg.type}\" at ${wrappedChildValue.path.join(\".\")}`);\n            const transferHandler = transferHandlers.get(wrappedChildValue.wrappedValue.type);\n            const newValue = transferHandler.deserialize(wrappedChildValue.wrappedValue.value);\n            replaceValueInObjectAtPath(arg.value, wrappedChildValue.path, newValue);\n        }\n        return arg.value;\n    }\n    else {\n        throw Error(`Unknown value type \"${arg.type}\"`);\n    }\n}\nfunction replaceValueInObjectAtPath(obj, path, newVal) {\n    const lastKey = path.slice(-1)[0];\n    const lastObj = path\n        .slice(0, -1)\n        .reduce((obj, key) => obj[key], obj);\n    lastObj[lastKey] = newVal;\n}\nfunction isRawWrappedValue(arg) {\n    return arg.type === \"RAW\";\n}\nfunction windowEndpoint(w) {\n    if (self.constructor.name !== \"Window\")\n        throw Error(\"self is not a window\");\n    return {\n        addEventListener: self.addEventListener.bind(self),\n        removeEventListener: self.removeEventListener.bind(self),\n        postMessage: (msg, transfer) => w.postMessage(msg, \"*\", transfer)\n    };\n}\nfunction isEndpoint(endpoint) {\n    return (\"addEventListener\" in endpoint &&\n        \"removeEventListener\" in endpoint &&\n        \"postMessage\" in endpoint);\n}\nfunction activateEndpoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.start();\n}\nfunction attachMessageHandler(endpoint, f) {\n    // Checking all possible types of `endpoint` manually satisfies TypeScript’s\n    // type checker. Not sure why the inference is failing here. Since it’s\n    // unnecessary code I’m going to resort to `any` for now.\n    // if(isWorker(endpoint))\n    //   endpoint.addEventListener('message', f);\n    // if(isMessagePort(endpoint))\n    //   endpoint.addEventListener('message', f);\n    // if(isOtherWindow(endpoint))\n    //   endpoint.addEventListener('message', f);\n    endpoint.addEventListener(\"message\", f);\n}\nfunction detachMessageHandler(endpoint, f) {\n    // Same as above.\n    endpoint.removeEventListener(\"message\", f);\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction isWindow(endpoint) {\n    // TODO: This doesn’t work on cross-origin iframes.\n    // return endpoint.constructor.name === 'Window';\n    return [\"window\", \"length\", \"location\", \"parent\", \"opener\"].every(prop => prop in endpoint);\n}\n/**\n * `pingPongMessage` sends a `postMessage` and waits for a reply. Replies are\n * identified by a unique id that is attached to the payload.\n */\nfunction pingPongMessage(endpoint, msg, transferables) {\n    const id = `${uid}-${pingPongMessageCounter++}`;\n    return new Promise(resolve => {\n        attachMessageHandler(endpoint, function handler(event) {\n            if (event.data.id !== id)\n                return;\n            detachMessageHandler(endpoint, handler);\n            resolve(event);\n        });\n        // Copy msg and add `id` property\n        msg = Object.assign({}, msg, { id });\n        endpoint.postMessage(msg, transferables);\n    });\n}\nfunction cbProxy(cb, callPath = [], target = function () { }) {\n    return new Proxy(target, {\n        construct(_target, argumentsList, proxy) {\n            return cb({\n                type: \"CONSTRUCT\",\n                callPath,\n                argumentsList\n            });\n        },\n        apply(_target, _thisArg, argumentsList) {\n            // We use `bind` as an indicator to have a remote function bound locally.\n            // The actual target for `bind()` is currently ignored.\n            if (callPath[callPath.length - 1] === \"bind\")\n                return cbProxy(cb, callPath.slice(0, -1));\n            return cb({\n                type: \"APPLY\",\n                callPath,\n                argumentsList\n            });\n        },\n        get(_target, property, proxy) {\n            if (property === \"then\" && callPath.length === 0) {\n                return { then: () => proxy };\n            }\n            else if (property === \"then\") {\n                const r = cb({\n                    type: \"GET\",\n                    callPath\n                });\n                return Promise.resolve(r).then.bind(r);\n            }\n            else {\n                return cbProxy(cb, callPath.concat(property), _target[property]);\n            }\n        },\n        set(_target, property, value, _proxy) {\n            return cb({\n                type: \"SET\",\n                callPath,\n                property,\n                value\n            });\n        }\n    });\n}\nfunction isTransferable(thing) {\n    return TRANSFERABLE_TYPES.some(type => thing instanceof type);\n}\nfunction* iterateAllProperties(value, path = [], visited = null) {\n    if (!value)\n        return;\n    if (!visited)\n        visited = new WeakSet();\n    if (visited.has(value))\n        return;\n    if (typeof value === \"string\")\n        return;\n    if (typeof value === \"object\")\n        visited.add(value);\n    if (ArrayBuffer.isView(value))\n        return;\n    yield { value, path };\n    const keys = Object.keys(value);\n    for (const key of keys)\n        yield* iterateAllProperties(value[key], [...path, key], visited);\n}\nfunction transferableProperties(obj) {\n    const r = [];\n    for (const prop of iterateAllProperties(obj)) {\n        if (isTransferable(prop.value))\n            r.push(prop.value);\n    }\n    return r;\n}\nfunction makeInvocationResult(obj) {\n    for (const [type, transferHandler] of transferHandlers) {\n        if (transferHandler.canHandle(obj)) {\n            const value = transferHandler.serialize(obj);\n            return {\n                value: { type, value }\n            };\n        }\n    }\n    return {\n        value: {\n            type: \"RAW\",\n            value: obj\n        }\n    };\n}\n","import { proxy, ProxyResult } from 'comlink';\n\nimport { API, ReadyMessage } from './components/App/client-api';\n\n// @ts-ignore\nimport { version } from '../package.json';\nconst MAJOR_VERSION = (version.split('.')[0] as string);\n\n/**\n * This function will load an iFrame\n * @param {HTMLIFrameElement} ifr iFrame that will be used to load squoosh\n * @param {string} src URL of squoosh instance to use\n */\nexport default async function loader(\n  ifr: HTMLIFrameElement,\n  src: string = 'https://squoosh.app',\n): Promise<ProxyResult<API>> {\n  ifr.src = src;\n  await new Promise(resolve => (ifr.onload = resolve));\n  ifr.contentWindow!.postMessage('READY?', '*');\n  await new Promise((resolve) => {\n    window.addEventListener('message', function l(ev) {\n      const msg = ev.data as ReadyMessage;\n      if (!msg || msg.type !== 'READY') {\n        return;\n      }\n      if (msg.version !== MAJOR_VERSION) {\n        throw Error(\n          `Version mismatch. SDK version ${MAJOR_VERSION}, Squoosh version ${\n            msg.version\n          }`,\n        );\n      }\n      ev.stopPropagation();\n      window.removeEventListener('message', l);\n      resolve();\n    });\n  });\n\n  return proxy(ifr.contentWindow!);\n}\n"],"names":["proxyValueSymbol","Symbol","TRANSFERABLE_TYPES","filter","f","self","map","uid","Math","floor","random","Number","MAX_SAFE_INTEGER","throwSymbol","transferHandlers","Map","canHandle","value","serialize","obj","port1","port2","MessageChannel","rootObj","endpoint","isWindow","windowEndpoint","isEndpoint","Error","activateEndpoint","attachMessageHandler","async","event","data","id","callPath","irequest","that","slice","reduce","propName","iresult","args","type","argumentsList","unwrapValue","apply","e","proxyVal","proxyValue","property","transferHandler","makeInvocationResult","postMessage","transferableProperties","expose","deserialize","proxy","Object","assign","message","stack","pingPongMessageCounter","target","cbProxy","cb","Proxy","construct","_target","_thisArg","length","[object Object]","then","r","Promise","resolve","bind","concat","set","_proxy","wrapValue","msg","transferables","handler","removeEventListener","detachMessageHandler","pingPongMessage","arg","key","wrappedChildren","item","iterateAllProperties","push","path","wrappedValue","wrappedChild","has","get","isRawWrappedValue","wrappedChildValue","join","newValue","replaceValueInObjectAtPath","newVal","lastKey","w","constructor","name","addEventListener","transfer","isMessagePort","start","every","prop","isTransferable","thing","some","visited","WeakSet","add","ArrayBuffer","isView","keys","MAJOR_VERSION","split","ifr","src","onload","contentWindow","window","l","ev","version","stopPropagation"],"mappings":"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"}