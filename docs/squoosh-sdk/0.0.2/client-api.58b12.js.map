{"version":3,"sources":["webpack:///./src/components/App/client-api.ts"],"names":["__webpack_require__","r","__webpack_exports__","d","exposeAPI","API","_compress_index__WEBPACK_IMPORTED_MODULE_0__","comlink__WEBPACK_IMPORTED_MODULE_1__","app","window","top","self","parent","postMessage","type","version","addEventListener","event","data","stopImmediatePropagation","Object","addRemovableGlobalListener","name","listener","document","removeEventListener","async","querySelectorWait","selector","el","querySelector","Promise","resolve","intervalId","setInterval","clearInterval","dispatchInputEvent","elm","ev","Event","bubbles","cancelable","dispatchEvent","[object Object]","_app","this","history","back","width","height","enableElm","checked","click","widthElm","heightElm","parseInt","value","toString","quality","qualityElm","blob","START","once","openFile","File","side","state","file","compressInstance","Error","loading","sides","listeners","reject","push","DOMException","error","then","forEach","remove"],"mappings":"qFACAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,wBAAAG,IAAA,IAAAC,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IASO,SAASI,EAAUI,GACpBC,SAAWC,MAKfC,KAAKC,OAAOC,YAAY,CAAEC,KAAM,QAASC,QAAS,KAAiB,KACnEJ,KAAKK,iBAAiB,UAAYC,IACb,WAAfA,EAAMC,OAGVD,EAAME,2BACNR,KAAKC,OAAOC,YAAY,CAAEC,KAAM,QAASC,QAAS,KAAiC,QAErFK,OAAAb,EAAA,EAAAa,CAAO,IAAIf,EAAIG,GAAMG,KAAKC,SAG5B,SAASS,EAEPC,EAASC,GAET,OADAC,SAASR,iBAAiBM,EAAMC,GACzB,IAAMC,SAASC,oBAAoBH,EAAMC,GAGlDG,eAAeC,EAAkBC,GAC/B,MAAMC,EAAKL,SAASM,cAAcF,GAClC,OAAIC,GAIG,IAAIE,QAA0BC,IACnC,MAAMC,EAAaC,YAAY,KAC7B,MAAML,EAAKL,SAASM,cAAcF,GAC9BC,IACFM,cAAcF,GACdD,EAAQH,KAET,OAIP,SAASO,EAAmBC,GAC1B,MAAMC,EAAK,IAAIC,MAAM,QAAS,CAC5BC,SAAS,EACTC,YAAY,IAEdJ,EAAIK,cAAcJ,GAOb,MAAMjC,EAIXsC,YAAoBC,GAAAC,KAAAD,OAKpBD,OACElC,OAAOqC,QAAQC,OAQjBJ,oBAAoBK,EAAeC,GACjC,MAAMC,QAAkBvB,EAAkB,0BACrCuB,EAAUC,SACbD,EAAUE,QAGZ,MAAMC,QAAiB1B,EAAkB,kBACnC2B,QAAkB3B,EAAkB,mBAGxC4B,SAASF,EAASG,OAASD,SAASD,EAAUE,QAC9CR,EAAQC,GAERI,EAASG,MAAQR,EAAMS,WACvBrB,EAAmBiB,KAEnBC,EAAUE,MAAQP,EAAOQ,WACzBrB,EAAmBkB,IAQvBX,iBAAiBe,GACf,MAAMC,QAAmBhC,EAAkB,oBAC3CgC,EAAWH,MAAQE,EAAQD,WAC3BrB,EAAmBuB,GASrBhB,QAAQiB,EAAYtC,GAClB,OAAO,IAAIS,QAASC,IAClBR,SAASR,iBAAiBV,EAAA,sBAAsBuD,MAAO,IAAM7B,IAAW,CACtE8B,MAAM,IAERjB,KAAKD,KAAKmB,SAAS,IAAIC,KAAK,CAACJ,GAAOtC,MAQxCqB,cAAcsB,GACZ,IAAKpB,KAAKD,KAAKsB,MAAMC,OAAStB,KAAKD,KAAKwB,iBACtC,MAAM,IAAIC,MAAM,2BAElB,IACGxB,KAAKD,KAAKwB,iBAAkBF,MAAMI,UAClCzB,KAAKD,KAAKwB,iBAAkBF,MAAMK,MAAMN,GAAMK,QAE/C,OAAOzB,KAAKD,KAAKwB,iBAAkBF,MAAMK,MAAMN,GAAME,KAGvD,MAAMK,EAA6D,GAE7DvE,EAAI,IAAI8B,QAAQ,CAACC,EAASyC,KAC9BD,EAAUE,KACRrD,EAA2B,eAA4BJ,IACjDA,EAAMgD,OAASA,GAGnBjC,EAAQa,KAAKD,KAAKwB,iBAAkBF,MAAMK,MAAMN,GAAME,SAG1DK,EAAUE,KACRrD,EAA2B,gBAA6BJ,IAClDA,EAAMgD,OAASA,GAGnBQ,EAAO,IAAIE,aAAa,UAAW,kBAGvCH,EAAUE,KACRrD,EAA2B,gBAA6BJ,IAClDA,EAAMgD,OAASA,GAGnBQ,EAAOxD,EAAM2D,YAKnB,OADA3E,EAAE4E,KAAK,IAAML,EAAUM,QAAQC,GAAUA,MAClC9E","file":"client-api.58b12.js","sourcesContent":["import App from './index';\nimport { SquooshStartEventType, SquooshSideEventType } from '../compress/index';\n\nimport { expose } from 'comlink';\n\nexport interface ReadyMessage {\n  type: 'READY';\n  version: string;\n}\n\nexport function exposeAPI(app: App) {\n  if (window === top) {\n    // Someone opened Squoosh in a window rather than an iframe.\n    // This can be deceiving and we wonâ€™t allow that.\n    return;\n  }\n  self.parent.postMessage({ type: 'READY', version: MAJOR_VERSION }, '*');\n  self.addEventListener('message', (event: MessageEvent) => {\n    if (event.data !== 'READY?') {\n      return;\n    }\n    event.stopImmediatePropagation();\n    self.parent.postMessage({ type: 'READY', version: MAJOR_VERSION } as ReadyMessage, '*');\n  });\n  expose(new API(app), self.parent);\n}\n\nfunction addRemovableGlobalListener<\n  K extends keyof GlobalEventHandlersEventMap\n>(name: K, listener: (ev: GlobalEventHandlersEventMap[K]) => void): () => void {\n  document.addEventListener(name, listener);\n  return () => document.removeEventListener(name, listener);\n}\n\nasync function querySelectorWait(selector: string): Promise<HTMLInputElement> {\n  const el = document.querySelector(selector);\n  if (el) {\n    return el as HTMLInputElement;\n  }\n\n  return new Promise<HTMLInputElement>(resolve => {\n    const intervalId = setInterval(() => {\n      const el = document.querySelector(selector);\n      if (el) {\n        clearInterval(intervalId);\n        resolve(el as HTMLInputElement);\n      }\n    }, 100);\n  });\n}\n\nfunction dispatchInputEvent(elm: HTMLInputElement): void {\n  const ev = new Event(\"input\", {\n    bubbles: true,\n    cancelable: true,\n  });\n  elm.dispatchEvent(ev);\n}\n\n/**\n * The API class contains the methods that are exposed via Comlink to the\n * outside world.\n */\nexport class API {\n  /**\n   * Internal constructor. Do not call.\n   */\n  constructor(private _app: App) {}\n\n  /**\n   * reset\n   */\n  back() {\n    window.history.back();\n  }\n\n  /**\n   * resizeToLimit\n   * @param width  Max width\n   * @param height Max height\n   */\n  async resizeToLimit(width: number, height: number) {\n    const enableElm = await querySelectorWait(`[name=\"resize.enable\"]`);\n    if (!enableElm.checked) {\n      enableElm.click();\n    }\n\n    const widthElm = await querySelectorWait(`[name=\"width\"]`);\n    const heightElm = await querySelectorWait(`[name=\"height\"]`);\n\n    if (\n      parseInt(widthElm.value) / parseInt(heightElm.value) >=\n      width / height\n    ) {\n      widthElm.value = width.toString();\n      dispatchInputEvent(widthElm);\n    } else {\n      heightElm.value = height.toString();\n      dispatchInputEvent(heightElm);\n    }\n  }\n\n  /**\n   * set quality\n   * @param quality value\n   */\n  async setQuality(quality: number) {\n    const qualityElm = await querySelectorWait(`[name=\"quality\"]`);\n    qualityElm.value = quality.toString();\n    dispatchInputEvent(qualityElm);\n  }\n\n  /**\n   * Loads a given file into Squoosh.\n   * @param blob The `Blob` to load\n   * @param name The name of the file. The extension of this name will be used\n   * to deterime which decoder to use.\n   */\n  setFile(blob: Blob, name: string) {\n    return new Promise((resolve) => {\n      document.addEventListener(SquooshStartEventType.START, () => resolve(), {\n        once: true,\n      });\n      this._app.openFile(new File([blob], name));\n    });\n  }\n\n  /**\n   * Grabs one side from Squoosh as a `File`.\n   * @param side The side which to grab. 0 = left, 1 = right.\n   */\n  async getBlob(side: 0 | 1) {\n    if (!this._app.state.file || !this._app.compressInstance) {\n      throw new Error('No file has been loaded');\n    }\n    if (\n      !this._app.compressInstance!.state.loading &&\n      !this._app.compressInstance!.state.sides[side].loading\n    ) {\n      return this._app.compressInstance!.state.sides[side].file;\n    }\n\n    const listeners: ReturnType<typeof addRemovableGlobalListener>[] = [];\n\n    const r = new Promise((resolve, reject) => {\n      listeners.push(\n        addRemovableGlobalListener(SquooshSideEventType.DONE, (event) => {\n          if (event.side !== side) {\n            return;\n          }\n          resolve(this._app.compressInstance!.state.sides[side].file);\n        }),\n      );\n      listeners.push(\n        addRemovableGlobalListener(SquooshSideEventType.ABORT, (event) => {\n          if (event.side !== side) {\n            return;\n          }\n          reject(new DOMException('Aborted', 'AbortError'));\n        }),\n      );\n      listeners.push(\n        addRemovableGlobalListener(SquooshSideEventType.ERROR, (event) => {\n          if (event.side !== side) {\n            return;\n          }\n          reject(event.error);\n        }),\n      );\n    });\n    r.then(() => listeners.forEach(remove => remove()));\n    return r;\n  }\n}\n"],"sourceRoot":""}