{"version":3,"sources":["webpack:///./src/codecs/rotate/processor.ts","webpack:///./codecs/rotate/rotate.wasm"],"names":["__webpack_require__","r","__webpack_exports__","d","rotate","_codecs_rotate_rotate_wasm__WEBPACK_IMPORTED_MODULE_0__","instancePromise","fetch","n","a","then","arrayBuffer","buf","WebAssembly","instantiate","async","data","opts","instance","bytesPerImage","width","height","additionalPagesToAllocate","Math","ceil","floor","exports","memory","buffer","byteLength","grow","view","Uint8ClampedArray","set","flipDimensions","ImageData","slice","module","p"],"mappings":"uDAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,2BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAOA,MAAMM,EAAkBC,MAPxBP,EAAAQ,EAAAH,GAO8BI,GAC3BC,KAAKT,GAAKA,EAAEU,eACZD,KAAKE,GAAOC,YAAYC,YAAYF,IAEhCG,eAAeX,EACpBY,EACAC,GAEA,MAAMC,SAAEA,SAAoBZ,EAKtBa,EAAgBH,EAAKI,MAAQJ,EAAKK,OAAS,EAM3CC,EALiBC,KAAKC,MAAsB,EAAhBL,EAAoB,GAAK,OAEjCI,KAAKE,MAC7BP,EAASQ,QAAQC,OAAOC,OAAOC,WAAa,OAI1CP,EAA4B,GAC9BJ,EAASQ,QAAQC,OAAOG,KAAKR,GAE/B,MAAMS,EAAO,IAAIC,kBAAkBd,EAASQ,QAAQC,OAAOC,QAC3DG,EAAKE,IAAIjB,EAAKA,KAAM,GAEpBE,EAASQ,QAAQtB,OAAOY,EAAKI,MAAOJ,EAAKK,OAAQJ,EAAKb,QAEtD,MAAM8B,EAAiBjB,EAAKb,OAAS,KAAQ,EAC7C,OAAO,IAAI+B,UACTJ,EAAKK,MAAMjB,EAAgB,EAAmB,EAAhBA,EAAoB,GAClDe,EAAiBlB,EAAKK,OAASL,EAAKI,MACpCc,EAAiBlB,EAAKI,MAAQJ,EAAKK,U,kBCxCvCgB,EAAOX,QAAU1B,EAAAsC,EAA0B","file":"process-rotate.d9d76.worker.js","sourcesContent":["import wasmUrl from '../../../codecs/rotate/rotate.wasm';\nimport { RotateOptions, RotateModuleInstance } from './processor-meta';\n\n// We are loading a 500B module here. Loading the code to feature-detect\n// `instantiateStreaming` probably takes longer to load than the time we save by\n// using `instantiateStreaming` in the first place. So let’s just use\n// `ArrayBuffer`s here.\nconst instancePromise = fetch(wasmUrl)\n  .then(r => r.arrayBuffer())\n  .then(buf => WebAssembly.instantiate(buf));\n\nexport async function rotate(\n  data: ImageData,\n  opts: RotateOptions,\n): Promise<ImageData> {\n  const { instance } = (await instancePromise) as {\n    instance: RotateModuleInstance;\n  };\n\n  // Number of wasm memory pages (á 64KiB) needed to store the image twice.\n  const bytesPerImage = data.width * data.height * 4;\n  const numPagesNeeded = Math.ceil((bytesPerImage * 2 + 8) / (64 * 1024));\n  // Only count full pages, just to be safe.\n  const numPagesAvailable = Math.floor(\n    instance.exports.memory.buffer.byteLength / (64 * 1024),\n  );\n  const additionalPagesToAllocate = numPagesNeeded - numPagesAvailable;\n\n  if (additionalPagesToAllocate > 0) {\n    instance.exports.memory.grow(additionalPagesToAllocate);\n  }\n  const view = new Uint8ClampedArray(instance.exports.memory.buffer);\n  view.set(data.data, 8);\n\n  instance.exports.rotate(data.width, data.height, opts.rotate);\n\n  const flipDimensions = opts.rotate % 180 !== 0;\n  return new ImageData(\n    view.slice(bytesPerImage + 8, bytesPerImage * 2 + 8),\n    flipDimensions ? data.height : data.width,\n    flipDimensions ? data.width : data.height,\n  );\n}\n","module.exports = __webpack_public_path__ + \"rotate.4cdaa.wasm\";"],"sourceRoot":""}